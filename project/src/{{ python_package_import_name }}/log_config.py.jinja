import logging

import structlog


def _common_config(formatter, debug: bool):
    root_logger = logging.getLogger()
    if not debug:
        # library log level is WARNING
        root_logger.setLevel(logging.WARNING)
        # our code log level is INFO
        logging.getLogger("__main__").setLevel(logging.INFO)
        logging.getLogger("{{ python_package_import_name }}").setLevel(logging.INFO)
    else:
        root_logger.setLevel(logging.DEBUG)

    # Prepare event dict for `ProcessorFormatter`.
    structlog.configure(
        processors=[
            structlog.contextvars.merge_contextvars,
            structlog.stdlib.filter_by_level,
            structlog.stdlib.ExtraAdder(),
            structlog.stdlib.add_logger_name,
            structlog.stdlib.add_log_level,
            structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
        ],
        logger_factory=structlog.stdlib.LoggerFactory(),
    )

    # Handover to stdlib logging
    handler = logging.StreamHandler()
    handler.setFormatter(formatter)
    root_logger.addHandler(handler)


def console_logging(debug: bool = False):
    formatter = structlog.stdlib.ProcessorFormatter(
        processors=[
            structlog.processors.TimeStamper(fmt="%H:%M:%S"),
            structlog.stdlib.ProcessorFormatter.remove_processors_meta,
            structlog.dev.ConsoleRenderer(),
        ],
    )
    _common_config(formatter, debug)


def json_logging(debug: bool = False):
    formatter = structlog.stdlib.ProcessorFormatter(
        processors=[
            structlog.processors.ExceptionRenderer(),
            structlog.processors.TimeStamper(fmt="iso", key="@timestamp"),
            structlog.stdlib.ProcessorFormatter.remove_processors_meta,
            structlog.processors.EventRenamer(to="message"),
            structlog.processors.JSONRenderer(),
        ],
    )
    _common_config(formatter, debug)
